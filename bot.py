import logging
import io
from typing import List, Tuple

import face_recognition
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from telegram import Update, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7937525572:AAEUh7eoNsVQX_vK3RMSkOqFBnt_DjexXV4"

known_faces_db = np.load('face_encodings.npz')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ª–∏—Ü–∞ –Ω–∞ –Ω–µ–º.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_face [–∏–º—è] - –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—Ü–æ –≤ –±–∞–∑—É\n"
        "/list_faces - —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—Ü\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - —è –ø–æ–ø—Ä–æ–±—É—é —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ª–∏—Ü–∞\n"
        "2. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ª–∏—Ü–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –∫–æ–º–∞–Ω–¥–æ–π /add_face [–∏–º—è]\n"
        "3. /list_faces - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞"
    )


async def list_faces(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_faces"""
    if not known_faces_db:
        await update.message.reply_text("‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—Ü.")
        return

    faces_list = "\n".join([f"‚Ä¢ {name}" for name in known_faces_db.keys()])
    await update.message.reply_text(f"üìã –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞:\n\n{faces_list}")


async def add_face(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏—Ü–∞ –≤ –±–∞–∑—É"""


    print('-------------------------')
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è: /add_face [–∏–º—è]")
        return
    logger.debug('Enter add face')
    name = " ".join(context.args)

    if not update.message.photo:
        await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ!")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = io.BytesIO()
    await photo_file.download_to_memory(out=photo_bytes)
    photo_bytes.seek(0)

    # –ò—â–µ–º –ª–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ
    image = face_recognition.load_image_file(photo_bytes)
    encodings = face_recognition.face_encodings(image,model="large")

    if not encodings:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ!")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ
    known_faces_db[name] = encodings[0]
    await update.message.reply_text(f"‚úÖ –õ–∏—Ü–æ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É!")


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    print('-------------------------')

    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = io.BytesIO()
    await photo_file.download_to_memory(out=photo_bytes)
    photo_bytes.seek(0)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = face_recognition.load_image_file(photo_bytes)

    # –ù–∞—Ö–æ–¥–∏–º –ª–∏—Ü–∞
    face_locations = face_recognition.face_locations(image)
    face_encodings = face_recognition.face_encodings(image, face_locations)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞
    known_faces = [
        (name, np.frombuffer(encoding, dtype=np.float64))
        for name, encoding in known_faces_db.items()
    ]

    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –ª–∏—Ü–∞
    recognized = []
    for face_encoding in face_encodings:
        name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        if known_faces:
            distances = face_recognition.face_distance(
                [enc for _, enc in known_faces],
                face_encoding
            )
            min_index = np.argmin(distances)
            if distances[min_index] < 0.6:  # –ü–æ—Ä–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                name = known_faces[min_index][0]
        recognized.append(name)

    # –†–∏—Å—É–µ–º —Ä–∞–º–∫–∏
    pil_image = Image.fromarray(image)
    draw = ImageDraw.Draw(pil_image)

    for (top, right, bottom, left), name in zip(face_locations, recognized):
        # –†–∞–º–∫–∞ –≤–æ–∫—Ä—É–≥ –ª–∏—Ü–∞
        draw.rectangle(((left, top), (right, bottom)), outline="red", width=2)

        # –ü–æ–¥–ø–∏—Å—å
    try:
        font = ImageFont.truetype("arial.ttf", 20)
    except:
        font = ImageFont.load_default()
    for (top, right, bottom, left), name in zip(face_locations, recognized):
        draw.rectangle(((left, top), (right, bottom)), outline="red", width=2)

        bbox = draw.textbbox((0, 0), name, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

        draw.rectangle(
            ((left, bottom - text_height - 10), (left + text_width + 10, bottom)),
            fill="red"
        )
        draw.text(
            (left + 5, bottom - text_height - 5),
            name,
            fill="white",
            font=font
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output = io.BytesIO()
    pil_image.save(output, format="JPEG")
    output.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.message.reply_photo(
        photo=InputFile(output),
        caption=f"–ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü: {len(recognized)}"
    )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("list_faces", list_faces))
    application.add_handler(CommandHandler("add_face", add_face))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()